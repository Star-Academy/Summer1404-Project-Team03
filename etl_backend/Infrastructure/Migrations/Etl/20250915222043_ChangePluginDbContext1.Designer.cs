// <auto-generated />
using System;
using Infrastructure.DbConfig;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations.Etl
{
    [DbContext(typeof(EtlDbContext))]
    [Migration("20250915222043_ChangePluginDbContext1")]
    partial class ChangePluginDbContext1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.DataTableColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ColumnType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValue("string");

                    b.Property<int>("DataTableSchemaId")
                        .HasColumnType("integer");

                    b.Property<int>("OrdinalPosition")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalColumnName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataTableSchemaId", "ColumnName")
                        .IsUnique();

                    b.ToTable("DataTableColumns");
                });

            modelBuilder.Entity("Domain.Entities.DataTableSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("TableName")
                        .IsUnique();

                    b.ToTable("DataTableSchemas");
                });

            modelBuilder.Entity("Domain.Entities.Plugin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("PluginType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WorkflowId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowId", "Order")
                        .IsUnique();

                    b.ToTable("Plugins", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StagedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SchemaId")
                        .HasColumnType("integer");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("StoredFilePath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("SchemaId")
                        .IsUnique();

                    b.HasIndex("StoredFilePath")
                        .IsUnique();

                    b.HasIndex("UploadedAt");

                    b.HasIndex("Stage", "Status");

                    b.ToTable("staged_files", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Workflow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Workflows", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DataTableColumn", b =>
                {
                    b.HasOne("Domain.Entities.DataTableSchema", "DataTable")
                        .WithMany("Columns")
                        .HasForeignKey("DataTableSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataTable");
                });

            modelBuilder.Entity("Domain.Entities.Plugin", b =>
                {
                    b.HasOne("Domain.Entities.Workflow", null)
                        .WithMany("Plugins")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.StagedFile", b =>
                {
                    b.HasOne("Domain.Entities.DataTableSchema", "Schema")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.StagedFile", "SchemaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Schema");
                });

            modelBuilder.Entity("Domain.Entities.DataTableSchema", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("Domain.Entities.Workflow", b =>
                {
                    b.Navigation("Plugins");
                });
#pragma warning restore 612, 618
        }
    }
}
